From myers@eng.utah.edu  Thu Mar 26 06:44:03 2015
Return-Path: <myers@eng.utah.edu>
Received: from mailhub.eng.utah.edu (mailhub.eng.utah.edu [155.98.110.27])
	by chou.ece.utah.edu (8.14.9/8.14.4) with ESMTP id t2QCi3GD002977
	for <atacs-bugs@vlsigroup.ece.utah.edu>; Thu, 26 Mar 2015 06:44:03 -0600
Received: from panic.eng.utah.edu ([155.98.110.176])
	by mailhub.eng.utah.edu with esmtps TLSv1.2:DHE-RSA-AES256-GCM-SHA384:256
	(Exim 4.84 id 1Yb78j-0005ye-0E)
	for <atacs-bugs@vlsigroup.ece.utah.edu>; Thu, 26 Mar 2015 06:44:03 -0600
Received: from rrcs-71-40-74-50.sw.biz.rr.com ([71.40.74.50] helo=[172.20.100.92])
	by panic.eng.utah.edu with esmtpsa (TLSv1:DHE-RSA-AES256-SHA:256)
	(Exim 4.84 (FreeBSD))
	(envelope-from <myers@eng.utah.edu>)
	id 1Yb78i-000GVe-Ba
	for atacs-bugs@vlsigroup.ece.utah.edu; Thu, 26 Mar 2015 06:44:00 -0600
From: "Chris J. Myers" <myers@ece.utah.edu>
Content-Type: multipart/alternative; boundary="Apple-Mail=_970C1030-CE3E-438B-9624-84E996E5463C"
Subject: CHANGE: multiple parameter operators in formula parser
Date: Thu, 26 Mar 2015 06:43:57 -0600
References: <CAHLmBr1ZKYHRoRy0UqQShXocokB1syqNO1xw5NO3MwP6uwscxg@mail.gmail.com>
To: Chris Myers <atacs-bugs@vlsigroup.ece.utah.edu>
Message-Id: <F6854FE7-3180-434B-B31B-00ADDF56757C@ece.utah.edu>
Mime-Version: 1.0 (Mac OS X Mail 8.2 \(2070.6\))
X-Mailer: Apple Mail (2.2070.6)
X-UCE-Score: -1.9 (-)
X-spam-level: -


--Apple-Mail=_970C1030-CE3E-438B-9624-84E996E5463C
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain;
	charset=utf-8



> Begin forwarded message:
>=20
> Date: March 25, 2015 at 10:38:57 PM MDT
> Subject: Re: [jsbml-team] Bug in formula parser
> From: Lucian Smith <lucianoelsmitho@gmail.com>
> To: "Chris J. Myers" <myers@ece.utah.edu>
> Cc: Nicolas Rodriguez <rodrigue@ebi.ac.uk>, "jsbml-team@caltech.edu" =
<jsbml-team@caltech.edu>, Leandro Watanabe <leandrohw@gmail.com>, Lucian =
Smith <lpsmith@uw.edu>
>=20
> Well, I literally just this week posted about plans for parsing the =
'chained inequalities'--that syntax used to be legal but nonsensical--if =
you wrote 'a < b < c', it would parse it as '(a < b) < c', which doesn't =
seem like it would ever be useful.  I implemented support for it in SVN, =
and it will be in the upcoming release.
>=20
> The other forms I mentioned are certainly not common, so it's =
understandable if you didn't know they were legal.  That's why I =
mentioned them!
>=20
> (Also, I'm putting some examples of inequalities with 3+ arguments =
into some new tests in the test suite--I'll send them on so you can =
check them out after the next libsbml release.)
>=20
> -Lucian
>=20
> On Wed, Mar 25, 2015 at 8:12 PM, Chris J. Myers <myers@ece.utah.edu =
<mailto:myers@ece.utah.edu>> wrote:
>=20
>> On Mar 25, 2015, at 11:20 AM, Lucian Smith <lucianoelsmitho@gmail.com =
<mailto:lucianoelsmitho@gmail.com>> wrote:
>>=20
>> I should note also that the L3 parser only outputs '=3D=3D', '!=3D', =
'<', '>', '<=3D', and '>=3D' when there are exactly two arguments to the =
function.  When there are 3+, it reverts to the 'eq(a,b,c)' form.
>>=20
>=20
> Hmm, I did not know that was legal.
>=20
>> xor is always output in functional form as 'xor([args])'.
>>=20
>> It's also worth noting that other normally-infix functions such as =
'plus', times', 'and', and others can legally have 0 and 1 arguments:  =
in those cases, the L3 parser outputs "plus()" or "plus(a)", "and()", =
etc.  The test suite has example models of that XML.
>>=20
>> Also, the next release of libsbml will parse chained inequalities =
like this, too:
>>=20
>> a < b < c
>>=20
>> will be parsed as lt(a,b,c) (same with =3D=3D, <, <=3D, >, and >=3D, =
but not !=3D, as that can only ever have two arguments)
>>=20
>> And chained mixed inequalities:
>>=20
>> a < b <=3D c
>>=20
>> are now parsed as
>>=20
>> a<b && b<=3Dc
>>=20
>> to an arbitrary number of arguments:
>>=20
>> a < b <=3D c > d >=3D e =3D=3D f !=3D g
>>=20
>> is parsed as
>>=20
>> and(a<b, b<=3Dc, c>d, d>=3De, e=3D=3Df, f!=3Dg)
>>=20
>> They aren't output as chained inequalities; merely accepted as valid =
input.
>>=20
>=20
> I really did not know those were valid! =20
>=20
> Chris
>=20
>>=20
>> -Lucian
>>=20
>> On Wed, Mar 25, 2015 at 7:39 AM, Nicolas Rodriguez =
<rodrigue@ebi.ac.uk <mailto:rodrigue@ebi.ac.uk>> wrote:
>>=20
>> ok, I have change that. One more question that remain in =
FormulaCompilerLibSBML is how does the libSBML L3 parser
>> output 'xor'?
>>=20
>> Nico
>>=20
>>=20
>> On 03/25/2015 02:09 PM, Chris J. Myers wrote:
>> The L3 compiler in libsbml returns =3D=3D and && and < etc. which is =
my preferred.  Infix looks much better than prefix in my opinion.
>>=20
>> Chris
>>=20
>> Sent from my iPhone
>>=20
>> On Mar 25, 2015, at 8:06 AM, Nicolas Rodriguez <rodrigue@ebi.ac.uk =
<mailto:rodrigue@ebi.ac.uk>> wrote:
>>=20
>> On 03/18/2015 05:16 PM, Andreas Dr=C3=A4ger wrote:
>> Am 16.03.15 um 09:01 schrieb Nicolas Rodriguez:
>> I would propose to change the compiler used by default in
>> 'formulaToString' to be using FormulaCompilerLibSBML which create =
infix
>> compatible
>> with FormulaParserLL3. As for the change to 'parseFormula' we can
>> explain how to get the old behavior.
>> Hi Nico,
>>=20
>> I totally agree. It is confusing for users (and also for test cases) =
if
>> the default formula writer produces output that cannot be identically
>> parsed by the default parser.
>>=20
>> So, please go ahead with this change.
>> So I have now changed the default formula compiler in JSBML.
>>=20
>> One noticeable change is for the comparison operators.
>>=20
>> Now 'eq(x, y)' or 'x =3D=3D y' would be written back by default as =
'eq(x, y)'
>> or 'lt(x, y)' or 'x < y' would be written back by default as 'lt(x, =
y)'
>>=20
>> But in fact, I am not sure what the default LibSBML L3 parser output =
in these cases.
>> It is right or should we output 'x =3D=3D y' and 'x < y' ?
>>=20
>> Thanks,
>> Nico
>>=20
>>=20
>=20
>=20


--Apple-Mail=_970C1030-CE3E-438B-9624-84E996E5463C
Content-Transfer-Encoding: quoted-printable
Content-Type: text/html;
	charset=utf-8

<html><head><meta http-equiv=3D"Content-Type" content=3D"text/html =
charset=3Dutf-8"></head><body style=3D"word-wrap: break-word; =
-webkit-nbsp-mode: space; -webkit-line-break: after-white-space;" =
class=3D""><br class=3D""><div><br class=3D""><blockquote type=3D"cite" =
class=3D""><div class=3D"">Begin forwarded message:</div><br =
class=3D"Apple-interchange-newline"><div style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px;" class=3D""><span=
 style=3D"font-family: -webkit-system-font, Helvetica Neue, Helvetica, =
sans-serif; color:rgba(0, 0, 0, 1.0);" class=3D""><b class=3D"">Date: =
</b></span><span style=3D"font-family: -webkit-system-font, Helvetica =
Neue, Helvetica, sans-serif;" class=3D"">March 25, 2015 at 10:38:57 PM =
MDT<br class=3D""></span></div><div style=3D"margin-top: 0px; =
margin-right: 0px; margin-bottom: 0px; margin-left: 0px;" class=3D""><span=
 style=3D"font-family: -webkit-system-font, Helvetica Neue, Helvetica, =
sans-serif; color:rgba(0, 0, 0, 1.0);" class=3D""><b class=3D"">Subject: =
</b></span><span style=3D"font-family: -webkit-system-font, Helvetica =
Neue, Helvetica, sans-serif;" class=3D""><b class=3D"">Re: [jsbml-team] =
Bug in formula parser</b><br class=3D""></span></div><div =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px;" class=3D""><span style=3D"font-family: =
-webkit-system-font, Helvetica Neue, Helvetica, sans-serif; =
color:rgba(0, 0, 0, 1.0);" class=3D""><b class=3D"">From: =
</b></span><span style=3D"font-family: -webkit-system-font, Helvetica =
Neue, Helvetica, sans-serif;" class=3D"">Lucian Smith &lt;<a =
href=3D"mailto:lucianoelsmitho@gmail.com" =
class=3D"">lucianoelsmitho@gmail.com</a>&gt;<br =
class=3D""></span></div><div style=3D"margin-top: 0px; margin-right: =
0px; margin-bottom: 0px; margin-left: 0px;" class=3D""><span =
style=3D"font-family: -webkit-system-font, Helvetica Neue, Helvetica, =
sans-serif; color:rgba(0, 0, 0, 1.0);" class=3D""><b class=3D"">To: =
</b></span><span style=3D"font-family: -webkit-system-font, Helvetica =
Neue, Helvetica, sans-serif;" class=3D"">"Chris J. Myers" &lt;<a =
href=3D"mailto:myers@ece.utah.edu" =
class=3D"">myers@ece.utah.edu</a>&gt;<br class=3D""></span></div><div =
style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
margin-left: 0px;" class=3D""><span style=3D"font-family: =
-webkit-system-font, Helvetica Neue, Helvetica, sans-serif; =
color:rgba(0, 0, 0, 1.0);" class=3D""><b class=3D"">Cc: </b></span><span =
style=3D"font-family: -webkit-system-font, Helvetica Neue, Helvetica, =
sans-serif;" class=3D"">Nicolas Rodriguez &lt;<a =
href=3D"mailto:rodrigue@ebi.ac.uk" class=3D"">rodrigue@ebi.ac.uk</a>&gt;, =
"<a href=3D"mailto:jsbml-team@caltech.edu" =
class=3D"">jsbml-team@caltech.edu</a>" &lt;<a =
href=3D"mailto:jsbml-team@caltech.edu" =
class=3D"">jsbml-team@caltech.edu</a>&gt;, Leandro Watanabe &lt;<a =
href=3D"mailto:leandrohw@gmail.com" =
class=3D"">leandrohw@gmail.com</a>&gt;, Lucian Smith &lt;<a =
href=3D"mailto:lpsmith@uw.edu" class=3D"">lpsmith@uw.edu</a>&gt;<br =
class=3D""></span></div><br class=3D""><div class=3D""><div dir=3D"ltr" =
class=3D"">Well, I literally just this week posted about plans for =
parsing the 'chained inequalities'--that syntax used to be legal but =
nonsensical--if you wrote 'a &lt; b &lt; c', it would parse it as '(a =
&lt; b) &lt; c', which doesn't seem like it would ever be useful.&nbsp; =
I implemented support for it in SVN, and it will be in the upcoming =
release.<div class=3D""><br class=3D""></div><div class=3D"">The other =
forms I mentioned are certainly not common, so it's understandable if =
you didn't know they were legal.&nbsp; That's why I mentioned =
them!</div><div class=3D""><br class=3D""></div><div class=3D"">(Also, =
I'm putting some examples of inequalities with 3+ arguments into some =
new tests in the test suite--I'll send them on so you can check them out =
after the next libsbml release.)</div><div class=3D""><br =
class=3D""></div><div class=3D"">-Lucian</div></div><div =
class=3D"gmail_extra"><br class=3D""><div class=3D"gmail_quote">On Wed, =
Mar 25, 2015 at 8:12 PM, Chris J. Myers <span dir=3D"ltr" =
class=3D"">&lt;<a href=3D"mailto:myers@ece.utah.edu" target=3D"_blank" =
class=3D"">myers@ece.utah.edu</a>&gt;</span> wrote:<br =
class=3D""><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 =
.8ex;border-left:1px #ccc solid;padding-left:1ex"><div =
style=3D"word-wrap:break-word" class=3D""><br class=3D""><div =
class=3D""><span class=3D""><blockquote type=3D"cite" class=3D""><div =
class=3D"">On Mar 25, 2015, at 11:20 AM, Lucian Smith &lt;<a =
href=3D"mailto:lucianoelsmitho@gmail.com" target=3D"_blank" =
class=3D"">lucianoelsmitho@gmail.com</a>&gt; wrote:</div><br =
class=3D""><div class=3D""><div dir=3D"ltr" class=3D"">I should note =
also that the L3 parser only outputs '=3D=3D', '!=3D', '&lt;', '&gt;', =
'&lt;=3D', and '&gt;=3D' when there are exactly two arguments to the =
function.&nbsp; When there are 3+, it reverts to the 'eq(a,b,c)' =
form.<div class=3D""><br =
class=3D""></div></div></div></blockquote></span><div class=3D"">Hmm, I =
did not know that was legal.</div><span class=3D""><br =
class=3D""><blockquote type=3D"cite" class=3D""><div class=3D""><div =
dir=3D"ltr" class=3D""><div class=3D"">xor is always output in =
functional form as 'xor([args])'.</div><div class=3D""><br =
class=3D""></div><div class=3D"">It's also worth noting that other =
normally-infix functions such as 'plus', times', 'and', and others can =
legally have 0 and 1 arguments: &nbsp;in those cases, the L3 parser =
outputs "plus()" or "plus(a)", "and()", etc.&nbsp; The test suite has =
example models of that XML.</div><div class=3D""><br class=3D""></div><div=
 class=3D"">Also, the next release of libsbml will parse chained =
inequalities like this, too:</div><div class=3D""><br =
class=3D""></div><div class=3D"">a &lt; b &lt; c</div><div class=3D""><br =
class=3D""></div><div class=3D"">will be parsed as lt(a,b,c) (same with =
=3D=3D, &lt;, &lt;=3D, &gt;, and &gt;=3D, but not !=3D, as that can only =
ever have two arguments)</div><div class=3D""><br class=3D""></div><div =
class=3D"">And chained mixed inequalities:</div><div class=3D""><br =
class=3D""></div><div class=3D"">a &lt; b &lt;=3D c</div><div =
class=3D""><br class=3D""></div><div class=3D"">are now parsed =
as</div><div class=3D""><br class=3D""></div><div class=3D"">a&lt;b =
&amp;&amp; b&lt;=3Dc</div><div class=3D""><br class=3D""></div><div =
class=3D"">to an arbitrary number of arguments:</div><div class=3D""><br =
class=3D""></div><div class=3D"">a &lt; b &lt;=3D c &gt; d &gt;=3D e =3D=3D=
 f !=3D g</div><div class=3D""><br class=3D""></div><div class=3D"">is =
parsed as</div><div class=3D""><br class=3D""></div><div =
class=3D"">and(a&lt;b, b&lt;=3Dc, c&gt;d, d&gt;=3De, e=3D=3Df, =
f!=3Dg)</div><div class=3D""><br class=3D""></div><div class=3D"">They =
aren't output as chained inequalities; merely accepted as valid =
input.</div><div class=3D""><br =
class=3D""></div></div></div></blockquote></span><div class=3D"">I =
really did not know those were valid! &nbsp;</div><span =
class=3D"HOEnZb"><font color=3D"#888888" class=3D""><div class=3D""><br =
class=3D""></div><div class=3D"">Chris</div></font></span><div =
class=3D""><div class=3D"h5"><br class=3D""><blockquote type=3D"cite" =
class=3D""><div class=3D""><div dir=3D"ltr" class=3D""><div class=3D""><br=
 class=3D""></div><div class=3D"">-Lucian<br class=3D""></div></div><div =
class=3D"gmail_extra"><br class=3D""><div class=3D"gmail_quote">On Wed, =
Mar 25, 2015 at 7:39 AM, Nicolas Rodriguez <span dir=3D"ltr" =
class=3D"">&lt;<a href=3D"mailto:rodrigue@ebi.ac.uk" target=3D"_blank" =
class=3D"">rodrigue@ebi.ac.uk</a>&gt;</span> wrote:<br =
class=3D""><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 =
.8ex;border-left:1px #ccc solid;padding-left:1ex"><br class=3D"">
ok, I have change that. One more question that remain in =
FormulaCompilerLibSBML is how does the libSBML L3 parser<br class=3D"">
output 'xor'?<br class=3D"">
<br class=3D"">
Nico<div class=3D""><div class=3D""><br class=3D"">
<br class=3D"">
On 03/25/2015 02:09 PM, Chris J. Myers wrote:<br class=3D"">
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 =
.8ex;border-left:1px #ccc solid;padding-left:1ex">
The L3 compiler in libsbml returns =3D=3D and &amp;&amp; and &lt; etc. =
which is my preferred.&nbsp; Infix looks much better than prefix in my =
opinion.<br class=3D"">
<br class=3D"">
Chris<br class=3D"">
<br class=3D"">
Sent from my iPhone<br class=3D"">
<br class=3D"">
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 =
.8ex;border-left:1px #ccc solid;padding-left:1ex">
On Mar 25, 2015, at 8:06 AM, Nicolas Rodriguez &lt;<a =
href=3D"mailto:rodrigue@ebi.ac.uk" target=3D"_blank" =
class=3D"">rodrigue@ebi.ac.uk</a>&gt; wrote:<br class=3D"">
<br class=3D"">
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 =
.8ex;border-left:1px #ccc solid;padding-left:1ex">
On 03/18/2015 05:16 PM, Andreas Dr=C3=A4ger wrote:<br class=3D"">
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 =
.8ex;border-left:1px #ccc solid;padding-left:1ex">
Am 16.03.15 um 09:01 schrieb Nicolas Rodriguez:<br class=3D"">
I would propose to change the compiler used by default in<br class=3D"">
'formulaToString' to be using FormulaCompilerLibSBML which create =
infix<br class=3D"">
compatible<br class=3D"">
with FormulaParserLL3. As for the change to 'parseFormula' we can<br =
class=3D"">
explain how to get the old behavior.<br class=3D"">
</blockquote>
Hi Nico,<br class=3D"">
<br class=3D"">
I totally agree. It is confusing for users (and also for test cases) =
if<br class=3D"">
the default formula writer produces output that cannot be identically<br =
class=3D"">
parsed by the default parser.<br class=3D"">
<br class=3D"">
So, please go ahead with this change.<br class=3D"">
</blockquote>
So I have now changed the default formula compiler in JSBML.<br =
class=3D"">
<br class=3D"">
One noticeable change is for the comparison operators.<br class=3D"">
<br class=3D"">
Now 'eq(x, y)' or 'x =3D=3D y' would be written back by default as =
'eq(x, y)'<br class=3D"">
or 'lt(x, y)' or 'x &lt; y' would be written back by default as 'lt(x, =
y)'<br class=3D"">
<br class=3D"">
But in fact, I am not sure what the default LibSBML L3 parser output in =
these cases.<br class=3D"">
It is right or should we output 'x =3D=3D y' and 'x &lt; y' ?<br =
class=3D"">
<br class=3D"">
Thanks,<br class=3D"">
Nico<br class=3D"">
</blockquote></blockquote>
<br class=3D"">
</div></div></blockquote></div><br class=3D""></div>
</div></blockquote></div></div></div><br =
class=3D""></div></blockquote></div><br class=3D""></div>
</div></blockquote></div><br class=3D""></body></html>=

--Apple-Mail=_970C1030-CE3E-438B-9624-84E996E5463C--

