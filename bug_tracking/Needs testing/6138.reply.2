From: Chris Myers <atacs-bugs@vlsigroup.ece.utah.edu>
To: myers@ece.utah.edu
Subject: Re: FEATURE: new port map window (PR#6138)
Date: Thu Oct 23 19:45:20 2014

Hi,

I've been thinking a bit more about the issue of where to put replacements. 
Consider the following example.  
Assume I have a 3x3 grid where I've put a species from the array S[n][n] (where
n=3) into each grid location.  
Now, assume I want to fill the 3x3 grid with 9 subModels which each include a
species S, and I want to use a 
replacement to replace this S with the S[d1][d0] from this array based on where
the subModel is located physically 
in the grid.  I have three cases I would like to be able to support:

1) The subModels are a 3x3 array too M[n][n], so I would add a replacement like
this:
	S[n][n] with dimension ids d1, d0
		Replace S in M[d1][d0] 

	If replacements moved to subModels, I get:
	M[n][n] with dimension ids d1, d0
		Replace S with S[d1][d0]

2) The subModels are in a size 9 array M[m] where m=9, so I would add a
replacement like this:
	S[n][n] with dimension ids d1, d0
		Replace S with M[n*d1+d0]

	If replacements moved to subModels, I get:
	M[m] with dimension id d0
		Replace S with S[quotient(d0,3)][remainder(d0,3)]

3) The last case is I have 9 individual subModels, M0, M1, ... M8, which are
perhaps even different types of 
models.  There is no way to handle this case with replacements on species:
	S[n][n] with dimension ids d1, d0
		Replace S with M0
		Replace S with M1
		...
		Replace S with M8

	This is illegal because when it is flattened, it would ultimately replace every
member of S[n][n] with S in every 
subModel.  However, I can do this if moved to subModels, as follows:
	M0
		Replace S with S[0][0]
	M1
		Replace S with S[0][1]
	...
	M8
		Replace S with S[3][3]

Case 3 above is crucial to our being able to do grid models using arrays which
was the original motivation for us 
to develop arrays in the first place.  Therefore, I really would like us to
consider moving replacements to 
subModels.  It is much cleaner and consistent.  Namely, both deletions and
replacements would now be in the 
same location.  In a GUI, you can make your deletions and replacements on a
subModel basis (we click on the 
subModel to open an editor to set replacements and deletions).  Finally, it is
more consistent with similar 
constructs in other domains.  For example, in programming, the parameters passed
(i.e., replacements) are 
associated with the function call (i.e., subModel).

Cheers,

Chris