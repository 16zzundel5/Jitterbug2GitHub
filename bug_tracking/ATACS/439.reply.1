From: Chris Myers <atacs-bugs@vlsigroup.ece.utah.edu>
To: hao@vlsigroup.ece.utah.edu
Subject: Re: internal top level vhdl signals (PR#439)
Date: Thu Oct 31 00:17:14 2002

See the bug described below.  How hard would it be to use the entity port names
and internal signal names for a component when that component is selected for
synthesis?

Essentially, what would need to happen is that the rename currently done on the
top level signal names is still done.  Then another rename is done for the names
associated with the selected component to name them back to match the component.
 Is this very difficult?

Chris


> Full_Name: Kip Killpack
> Version: updated today
> OS: 
> spec: 
> log: 
> Submission from: chou.elen.utah.edu (155.99.23.202)
> Submitted by: killpack
> 
> 
> If the internal signal is named different from the entity signal name,
> Then it will synthesize, but the structural stored vhdl entity will have
> the internal signal name instead of the orignial entity signal name.
> 
> (ben is the internal signal name.  It was originally en on the and2_a entity)
> Kip
> 
> STORE_VHDL_STRUCTURAL_ENTITY::::::::::::::::::::::::::::::::::::::::::::::::::::
> entity and2_a is
>   port( a0 : in std_logic;
>         a1 : in std_logic;
>         b0 : in std_logic;
>         b1 : in std_logic;
>        ben : inout std_logic;
>         c0 : inout std_logic;
>         c1 : inout std_logic;
>         ce : in std_logic
>        );
> end and2_a;
> 
> 
> TOPLEVEL::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
> -- atacs -mV -mU -mP -mT -ms -mD -lv -M20 -ya -sv and2_a_top and2_a
> LIBRARY ieee, work;
> USE ieee.std_logic_1164.all;
> 
> ENTITY and2_a_top IS
> END and2_a_top;
> 
> ARCHITECTURE behavior of and2_a_top IS
> 
>   component and2_a_env
>     PORT(
>       c0 : IN std_logic;
>       c1 : IN std_logic;
>       en : IN std_logic;
>       a0 : INOUT std_logic;-- := '0';
>       a1 : INOUT std_logic;-- := '0';
>       b0 : INOUT std_logic;-- := '0';
>       b1 : INOUT std_logic;-- := '0';
>       ce : INOUT std_logic-- := '0'
>       );
>   END component;
> 
>   component and2_a
>     PORT(
>       c0 : INOUT std_logic;-- := '0';
>       c1 : INOUT std_logic;-- := '0';
>       en : INOUT std_logic;-- := '1';
>       a0 : IN std_logic;
>       a1 : IN std_logic;
>       b0 : IN std_logic;
>       b1 : IN std_logic;
>       ce : IN std_logic
>       );
>   END component;
> 
>   signal a0 : std_logic;
>   signal a1 : std_logic;
>   signal b0 : std_logic;
>   signal b1 : std_logic;
>   signal ben : std_logic := '1';
>   signal d0 : std_logic;
>   signal d1 : std_logic;
>   signal de : std_logic;
>   signal s0 : std_logic;
>   signal s1 : std_logic;
>   signal se : std_logic;
> 
> BEGIN
>   env : and2_a_env
>     port map (
>       c0 => c0,
>       c1 => c1,
>       en => ben,
>       a0 => a0,
>       a1 => a1,
>       b0 => b0,
>       b1 => b1,
>       ce => ce
>       );
> 
>   the_and2 : and2_a
>     port map (
>       c0 => c0,
>       c1 => c1,
>       en => ben,
>       a0 => a0,
>       a1 => a1,
>       b0 => b0,
>       b1 => b1,
>       ce => ce
>       );
> 
> end behavior;
> 
> 