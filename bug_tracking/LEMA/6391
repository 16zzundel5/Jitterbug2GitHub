From zhen.zhang@utah.edu  Mon Sep 14 23:51:54 2015
Return-Path: <zhen.zhang@utah.edu>
Received: from ipo6.cc.utah.edu (ipo6.cc.utah.edu [155.97.144.36])
	by chou.ece.utah.edu (8.14.9/8.14.4) with ESMTP id t8F5prRf005993
	for <atacs-bugs@vlsigroup.ece.utah.edu>; Mon, 14 Sep 2015 23:51:54 -0600
X-IronPort-AV: E=Sophos;i="5.17,533,1437458400"; 
   d="scan'208";a="51133884"
Received: from mail-oi0-f54.google.com ([209.85.218.54])
  by ipo6smtp.cc.utah.edu with ESMTP/TLS/RC4-SHA; 14 Sep 2015 23:51:54 -0600
Received: by oibi136 with SMTP id i136so89583493oib.3
        for <atacs-bugs@vlsigroup.ece.utah.edu>; Mon, 14 Sep 2015 22:51:53 -0700 (PDT)
X-Received: by 10.202.77.150 with SMTP id a144mr14529623oib.20.1442296313149;
 Mon, 14 Sep 2015 22:51:53 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.202.199.4 with HTTP; Mon, 14 Sep 2015 22:51:13 -0700 (PDT)
From: Zhen Zhang <zhen.zhang@utah.edu>
Date: Mon, 14 Sep 2015 23:51:13 -0600
Message-ID: <CA+LVOvnXJMdgsSATsP_3UmHhqKjGdZU7bj_cg4pxW2kdtt4-vw@mail.gmail.com>
Subject: BUG: VHDL compiler does not handle random assignments
To: atacs-bugs <atacs-bugs@vlsigroup.ece.utah.edu>
Cc: "Chris J. Myers" <myers@ece.utah.edu>
Content-Type: text/plain; charset=UTF-8

Currently, random selection in an assignment does not compile to a
corresponding variable assignment in LPN. For example, the VHDL
statement "data1 <= selection(4,2)" is not converted to a random
assignment to variable "data1" in LPN.

Rewriting this statement to the statements below does not help either.
Only the assignment appears under the first branch of the if
statement, i.e., one_flit <= "11", gets compiled to an assignment in
LPN. The other assignments are lost.
    z := selection(4);
    if (z = 1) then
      data1 <= "11";
      wait for delay(1, 1);
    elsif (z = 2) then
      data1 <= "01";
      wait for delay(1, 1);
    elsif (z = 3) then
      data1 <= "10";
      wait for delay(1, 1);
    else
      data1 <= "00";
      wait for delay(1, 1);
    end if;

The complete VHDL file is pasted below.
library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;
use ieee.numeric_std.all;
use work.channel.all;

entity producer_consumer is
end producer_consumer;

architecture behavior of producer_consumer is
  signal producer_to_buf1:channel:=init_channel;
begin
  producer:process
    variable z : integer;
  begin
    --data1 <= selection(4,2);
    --wait for delay(5,10);
    z := selection(4);                  -- returns 1, 2, 3, or 4
    if (z = 1) then
      data1 <= "11";
      wait for delay(1, 1);
    elsif (z = 2) then
      data1 <= "01";
      wait for delay(1, 1);
    elsif (z = 3) then
      data1 <= "10";
      wait for delay(1, 1);
    else
      data1 <= "00";
      wait for delay(1, 1);
    end if;
    send(producer_to_buf1,data1);
  end process producer;
  buf1:process
  begin
    receive(producer_to_buf1,data2);
  end process buf1
end behavior;

