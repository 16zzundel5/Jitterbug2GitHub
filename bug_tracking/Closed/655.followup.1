From eemercer@vlsigroup.ece.utah.edu  Tue Apr 23 09:26:37 2002
Return-Path: <eemercer@vlsigroup.ece.utah.edu>
Received: from chen.elen.utah.edu (IDENT:root@chen.elen.utah.edu [155.99.23.216])
	by chou.elen.utah.edu (8.11.6/8.11.6) with ESMTP id g3NFQbj08887
	for <atacs-bugs@shang.elen.utah.edu>; Tue, 23 Apr 2002 09:26:37 -0600
Received: from localhost (eemercer@localhost)
	by chen.elen.utah.edu (8.11.6/8.11.6) with ESMTP id g3NFQbL08627
	for <atacs-bugs@shang.elen.utah.edu>; Tue, 23 Apr 2002 09:26:37 -0600
X-Authentication-Warning: chen.elen.utah.edu: eemercer owned process doing -bs
Date: Tue, 23 Apr 2002 09:26:36 -0600 (MDT)
From: Eric Mercer <eemercer@vlsigroup.ece.utah.edu>
X-X-Sender: eemercer@chen.elen.utah.edu
To: Chris Myers <atacs-bugs@shang.elen.utah.edu>
Subject: Re: TEL (fwd) (PR#655)
In-Reply-To: <200204212043.g3LKhSj09641@chou.elen.utah.edu>
Message-ID: <Pine.LNX.4.44.0204230913020.4199-100000@chen.elen.utah.edu>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII

> The problem was in get_causal_events.  When checking if an event can
> ever be causal in the future, it would check if it is_level_matched.  
> The problem is that a sequencing event would always fail this check.  
> Therefore, it would purge sequencing events too soon potentially.  
> Therefore, it now checks if it is either a sequencing event OR
> is_level_matched.

Good catch!  I am glad that you stumbled onto this because it solved 
another issue---Eric P's small TEL structure that I mailed to you the 
other week.  As soon as I saw the issue, I looked again at Eric P's 
example that used dummy events too.  His events were being purged early 
causing the specification to go unbounded.  With this fix, I get the 
following results:

BAP: Found 80 zones in 71 states for erp (20d 998760m 0.27u)
POSETS: Found 176 zones in 101 states for erp (36d 1736040m 0.18u)
GEOM: 274 regions explored, 71 states explored in 0.0544469 seconds

I am still not sure what is going on with POSETS, but BAP happily agrees 
with GEOM, which is good enough for me.  Great work!

I do have a question, however, relating to the fix: 

if ( !sc.is_level_matched( t, enabling ) && 
     !t.is_dummy_event( enabling )          ) continue;


Should this be t.is_sequencing_event( enabling ) instead?  The difference 
is that is_sequencing_event checks events[enabling]->type & DUMMY where 
is_dummy_event checks events[enabling]->type == DUMMY.  Its seems that 
this check should only be on _true_ dummy events because sequencing events 
may just be abstracted inputs.  Consequentially, it doesn't make any 
difference in the code.  This is more of a question for my understanding 
of the meaning of the different functions in the code.

egm

PS

I am not going to check in my version.  I will let you just check in your 
code unless you tell me otherwise.

---------------------------------------------------------------------------
Eric G Mercer                                   eemercer@ece.utah.edu
MEB 3280 Dept. Electrical Engineering           Office: 801-581-8378
University of Utah                              FAX: 801-581-5281
Salt Lake City, UT 84112
ID: 0x4340C2D9 <eemercer@ece.utah.edu>
Finger Print: C2B3 329C D759 3651 66CD  48D3 605D 32AC 4340 C2D9
---------------------------------------------------------------------------

