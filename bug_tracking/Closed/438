From eemercer@yuan.elen.utah.edu  Tue May  2 17:35:03 2000
Return-Path: <eemercer@yuan.elen.utah.edu>
Received: from localhost (eemercer@localhost)
	by shang.elen.utah.edu (8.9.3/8.9.3) with ESMTP id RAA08293
	for <atacs-bugs@shang.elen.utah.edu>; Tue, 2 May 2000 17:35:03 -0600
X-Authentication-Warning: shang.elen.utah.edu: eemercer owned process doing -bs
Date: Tue, 2 May 2000 17:35:03 -0600 (MDT)
From: Eric Mercer <eemercer@yuan.elen.utah.edu>
X-Sender: eemercer@shang.elen.utah.edu
To: atacs-bugs@shang.elen.utah.edu
Subject: Random Choice and If statements
Message-ID: <Pine.LNX.4.10.10005021729590.8289-100000@shang.elen.utah.edu>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII

If one naively chooses to use if-then-else to implement a selection as
follows:

choose := selection(2);
if choose = 1 then
 assign( l0, '1', 200, inf );
else
  assign( l1, '1', 200, inf );
end if;

Then ATACS will not create the correct TEL structure because it assumes
the if clause is ALWAYS true, and thus, the else clause can never happen.
This is evidenced by the fact that the boolean expression on the else
clause is compiled to false in the tel as shown below:

$5+_buf_a_env_env/1 $1+_buf_a_env_env/1 [false] 1 0 0

BTW, ATACS does not know what to do with false, since it thinks it is a
signal, rather than the value of an expression.  This implies that it will
still generate a correct circuit, but when the analysis actually supports
the notion of something always being false, then ATACS will synthesize an
incorrect circuit.

NOTE: This problem can be avoided by using a case statement instead of an
if-then-else clause, but this still should be handled differently by the
compiler.

egm

-----
Eric G Mercer                                   eemercer@ee.utah.edu
MEB 4120 Dept. Electrical Engineering           Office: 801-581-8378
University of Utah                              FAX: 801-581-5281
Salt Lake City, UT 84112

