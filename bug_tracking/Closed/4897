From kjones5863@gmail.com  Wed Jan  6 11:06:03 2010
Return-Path: <kjones5863@gmail.com>
X-Spam-Checker-Version: SpamAssassin 3.2.5 (2008-06-10) on chou.ece.utah.edu
X-Spam-Level: 
X-Spam-Status: No, score=0.1 required=5.0 tests=AWL,BAYES_20,FH_DATE_PAST_20XX,
	HTML_MESSAGE autolearn=no version=3.2.5
Received: from mail-iw0-f173.google.com (mail-iw0-f173.google.com [209.85.223.173])
	by chou.ece.utah.edu (8.14.3/8.13.1) with ESMTP id o06I6326029212;
	Wed, 6 Jan 2010 11:06:03 -0700
Received: by iwn3 with SMTP id 3so12054808iwn.19
        for <multiple recipients>; Wed, 06 Jan 2010 10:06:02 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:mime-version:received:in-reply-to:references
         :date:message-id:subject:from:to:cc:content-type;
        bh=k0PTTd/MTQUviHnWcM2/ObleMG/c05pXesZt8eshMz0=;
        b=FaCApQlBF8DEK6tGIDDF46RgpN1hnrAqrX/+o5AEJBJjc1qwb7f+r8Ynpmn4W1rirn
         fbdUTBk/g4vV60AInR3grHcGpy5R20aKGXYtLbnpxurE7hHkwx7W11ii9t4aLP6Dcy2l
         ELAkGYNzwdWmrk3sjaf3WDosTTtO/nBhUVM+4=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :cc:content-type;
        b=W/pZwK+kZ7kSsn1GUQfRWSUYySo0518uRsZ5zpE+VilxKkXFuTXFd9/c93HTBee296
         uDpr8YTSJM8QVsIbTpzy+ryFk4Zds53Pk9mRdRlHJ1qtVUbzyQUnZwcDZgI1EIioWo6c
         muEO/uM8DE5coZxKUdrM3L3u80kcYVKp9jZq0=
MIME-Version: 1.0
Received: by 10.231.168.132 with SMTP id u4mr2209865iby.54.1262801162301; Wed, 
	06 Jan 2010 10:06:02 -0800 (PST)
In-Reply-To: <108CA507-307A-4CCF-99FC-FBEBF09AFFC6@ece.utah.edu>
References: <108CA507-307A-4CCF-99FC-FBEBF09AFFC6@ece.utah.edu>
Date: Wed, 6 Jan 2010 11:06:02 -0700
Message-ID: <2b601e3d1001061006y7a725f1scd00f05a9188fc17@mail.gmail.com>
Subject: Re: BUG: Attached example over abstracts
From: Kevin Jones <kjones5863@gmail.com>
To: "Chris J. Myers" <myers@ece.utah.edu>
Cc: Kevin Jones <atacs-bugs@vlsigroup.ece.utah.edu>,
        kjones@vlsigroup.ece.utah.edu
Content-Type: multipart/alternative; boundary=001636cd73c7b373a2047c82ce5c

--001636cd73c7b373a2047c82ce5c
Content-Type: text/plain; charset=ISO-8859-1

I did find some bugs that I fixed on this example, but I believe that the
end result was correct.  If I am not mistaken, t2 should be eliminated.
 When the arc leaving t2 is removed (because t2 is a failure transition),
the only assignment to W is never read (W being a local variable) and can be
removed.  This is the only assignment to the discrete variable W, so its
initial value can be propagated as a constant into every place where W
appears.  1>=3 is false, which permanently disables the enabling condition
to transition t2, thus allowing the removal of the transition.  I am
currently not allowing the propagation of ranges of discrete values into
variables (would this be useful?), so if you change the initial value of W
to the range [1,2], t2 stays in the graph, even though it could never be
fired.

If we allow tautologies on relational operators acting on discrete variables
(which is currently not simplified), this is easier to deduce.  W is
initially 1, so the enabling condition of t2 is not satisfied.  The only
assignment that can enable the expression on t2 is on t2 itself.  Therefore,
according to the transform that we implemented, the enabling condition on t2
can never be satisfied.  This may be a reason to add support for tautologies
on relational operators dealing with integer values.

On Tue, Jan 5, 2010 at 2:41 PM, Chris J. Myers <myers@ece.utah.edu> wrote:

> This file abstracts to a single loop.  t2 appears to be removed by mistake.
>
> .inputs Y X
> .dummy t1 t3 t5 t4 t2
> #@.variables Z W
> #@.failtrans t2
> #|.places p3 p1 p2
> #@.init_state [00]
> .graph
> t1 p2
> p1 t1
> t3 p2
> p1 t3
> t5 p3
> p3 t5
> t4 p1
> p2 t4
> t2 p2
> p1 t2
> .marking {p3 p1 }
> #@.init_vals {<Z=0><W=[1,1]>}
> #@.enablings {<t1=[X&Y]><t3=[~X&Y&(W>=0)]><t5=[Z=0]><t2=[X&~Y&(W>=3)]>}
> #@.assignments {<t1=[Z:=1]><t3=[Z:=3]><t4=[Z:=0]><t2=[W:=3]><t2=[Z:=2]>}
> #@.delay_assignments {<t1=[1,1]><t3=[1,1]><t5=[2,2]><t4=[0,0]><t2=[1,1]>}
> #@.boolean_assignments {<t4=[X:=false]><t5=[X:=true]>}
> .end
>
>

--001636cd73c7b373a2047c82ce5c
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

I did find some bugs that I fixed on this example, but I believe that the e=
nd result was correct. =A0If I am not mistaken, t2 should be eliminated. =
=A0When the arc leaving t2 is removed (because t2 is a failure transition),=
 the only assignment to W is never read (W being a local variable) and can =
be removed. =A0This is the only assignment to the discrete variable W, so i=
ts initial value can be propagated as a constant into every place where W a=
ppears. =A01&gt;=3D3 is false, which permanently disables the enabling cond=
ition to transition t2, thus allowing the removal of the transition. =A0I a=
m currently not allowing the propagation of ranges of discrete values into =
variables (would this be useful?), so if you change the initial value of W =
to the range [1,2], t2 stays in the graph, even though it could never be fi=
red.<div>
<br></div><div>If we allow tautologies on relational operators acting on di=
screte variables (which is currently not simplified), this is easier to ded=
uce. =A0W is initially 1, so the enabling condition of t2 is not satisfied.=
 =A0The only assignment that can enable the expression on t2 is on t2 itsel=
f. =A0Therefore, according to the transform that we implemented, the enabli=
ng condition on t2 can never be satisfied. =A0This may be a reason to add s=
upport for tautologies on relational operators dealing with integer values.=
<br>
<br><div class=3D"gmail_quote">On Tue, Jan 5, 2010 at 2:41 PM, Chris J. Mye=
rs <span dir=3D"ltr">&lt;<a href=3D"mailto:myers@ece.utah.edu">myers@ece.ut=
ah.edu</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quote" style=3D"=
margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex;">
This file abstracts to a single loop. =A0t2 appears to be removed by mistak=
e.<br>
<br>
.inputs Y X<br>
.dummy t1 t3 t5 t4 t2<br>
#@.variables Z W<br>
#@.failtrans t2<br>
#|.places p3 p1 p2<br>
#@.init_state [00]<br>
.graph<br>
t1 p2<br>
p1 t1<br>
t3 p2<br>
p1 t3<br>
t5 p3<br>
p3 t5<br>
t4 p1<br>
p2 t4<br>
t2 p2<br>
p1 t2<br>
.marking {p3 p1 }<br>
#@.init_vals {&lt;Z=3D0&gt;&lt;W=3D[1,1]&gt;}<br>
#@.enablings {&lt;t1=3D[X&amp;Y]&gt;&lt;t3=3D[~X&amp;Y&amp;(W&gt;=3D0)]&gt;=
&lt;t5=3D[Z=3D0]&gt;&lt;t2=3D[X&amp;~Y&amp;(W&gt;=3D3)]&gt;}<br>
#@.assignments {&lt;t1=3D[Z:=3D1]&gt;&lt;t3=3D[Z:=3D3]&gt;&lt;t4=3D[Z:=3D0]=
&gt;&lt;t2=3D[W:=3D3]&gt;&lt;t2=3D[Z:=3D2]&gt;}<br>
#@.delay_assignments {&lt;t1=3D[1,1]&gt;&lt;t3=3D[1,1]&gt;&lt;t5=3D[2,2]&gt=
;&lt;t4=3D[0,0]&gt;&lt;t2=3D[1,1]&gt;}<br>
#@.boolean_assignments {&lt;t4=3D[X:=3Dfalse]&gt;&lt;t5=3D[X:=3Dtrue]&gt;}<=
br>
.end<br>
<br>
</blockquote></div><br></div>

--001636cd73c7b373a2047c82ce5c--

