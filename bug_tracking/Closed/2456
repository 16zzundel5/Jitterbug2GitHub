From myers@ece.utah.edu  Thu Jan 17 12:42:18 2008
Return-Path: <myers@ece.utah.edu>
X-Spam-Checker-Version: SpamAssassin 3.2.1 (2007-05-02) on chou.ece.utah.edu
X-Spam-Level: **
X-Spam-Status: No, score=2.8 required=3.0 tests=AWL,BAYES_50,RCVD_BAD_ID
	autolearn=no version=3.2.1
Received: from mailhub.eng.utah.edu (mailhub.eng.utah.edu [155.98.111.32])
	by chou.ece.utah.edu (8.14.1/8.13.1) with ESMTP id m0HJgIYL007968
	for <atacs-bugs@vlsigroup.ece.utah.edu>; Thu, 17 Jan 2008 12:42:18 -0700
Received: from beta.eng.utah.edu ([155.98.111.99])
	by mailhub.eng.utah.edu with esmtp 
	(Exim 4.60 id 1JFae2-00004C-Nv)
	for <atacs-bugs@vlsigroup.ece.utah.edu>; Thu, 17 Jan 2008 12:43:24 -0700
Received: from [192.168.1.106] (changcheng.ece.utah.edu [155.98.26.227])
	(authenticated bits=0)
	by beta.eng.utah.edu (8.13.1/8.13.1) with ESMTP id m0HJgG8K008918
	for <atacs-bugs@vlsigroup.ece.utah.edu>; Thu, 17 Jan 2008 12:42:16 -0700
Subject: BUG: strange simulation results when using getMultiplier
From: Chris Myers <myers@ece.utah.edu>
To: atacs-bugs <atacs-bugs@vlsigroup.ece.utah.edu>
Content-Type: text/plain
Date: Thu, 17 Jan 2008 12:41:27 -0700
Message-Id: <1200598887.11868.38.camel@jiaqi.ece.utah.edu>
Mime-Version: 1.0
X-Mailer: Evolution 2.10.3 (2.10.3-4.fc7) 
Content-Transfer-Encoding: 7bit
X-UCE-Score: 1.2 (+)
X-Scan-Signature: a75380776e3da7e1c10a138c289e280b

I discovered (or created, cannot figure out which) a very strange bug.
If you goto line 647 in sbml_front_end_processor.c and uncomment line
647 and 649 and comment line 648.  If you run the following command on
the attached test.sbml:

reb2sac --target.encoding=rkf45 test.sbml

You will see the multiplier which should be 1.1 takes a very large
number.  Even worse is that the rkf45-run.tsd file contains "nan".
Similarly, time takes on nan if you run Gillespie's algorithm on this
file.  However, it works fine with lines 647/649 commented and 648
uncommented except of course the multiplier value for the unit is
incorrect.

It does not appear to be a libsbml 3.0.3 problem as I cut it down to
just libsbml accesses to create test2.c which you can compile:

cc -g -O2 -Wall -I/usr/include/libxml2 -I../../include -L../../src -o
test2 test2.c util.c -lsbml -L/usr/lib -lxml2 -lz -lm -lstdc++ -lm -lm

This works fine.  My only guess is that something is stomping on the
memory for the SBML model somewhere, but I'm not sure where.  Note that
I've also commented out all of my recent changes in this file and
unit_manager.c, and I get the same result.  

This may never have shown itself before because we did not previously
use sbml files with unit definitions.

Anyway, I have a workaround, but I am concerned there is some subtle
memory bug somewhere that will show up again later.  If you have any
ideas or if you have a favorite memory corruption analyzer, please take
a look.


