From: Chris Myers <atacs-bugs@shang.elen.utah.edu>
To: pabeerel@eiger.usc.edu
Subject: Re: none (PR#482)
Date: Sat Jun 17 15:03:46 2000

> 
> 4.1. Graph Basics
> 
> CS people will disagree with your definition of a graph,
> which seems restrictive on R. Symmetric R relates to
> an undirected graph, and why irreflexive? Is ther some
> reason, you don't want self loops? 
> 
Good point.  I have taken your advise and started with a general
definition of a graph and added undirected/directed as special
cases.  I've kept with the irreflexive/symmetric restriction for
undirected graphs (as with CLR), but I dropped it for digraphs.
Thus, I allow digraphs to have self-loops but not undirected graphs.
>
> Your definition of the size of a graph based on the
> nymber of edges is also different than what I think
> is customary.
> 
I have checked several sources, and this appears to be correct.
>
> Fig. 4.1. a) now mentioned the word "undirected", which
> seems odd since all graphs by your definition are undirected.
> 
Graph theorists seem to think as directed graphs as a special
case while CS-types think of directed graphs of being at least
on equal level with undirected graphs.  As per your suggestion,
I have now taken the CS approach.
>
> The fact that a walk is defined as one that does not
> repeat any edge versus that of any node also seems
> arbitrary, but I don't know whats customary on that
> point.
> 
Changed walk to path and path to simple path (as per CLR).
>
> I see now you bring up a digraph. The problem I have
> is that section 4.1 really defines an undirected
> graph. I much prefer see a general definition of
> a graph and the undirected and directed graphs as
> special cases.   
>
Done.
>
> Yet, I still don't see why you want to remove the
> possibility of self-loops.
> 
Now, allow self-loops in digraphs.
>
> Example 4.1.5. I don't know what you mean as a graph having 
> a labelling function, since the graph is just a pair R, E. 
> If you define a labelled graph as a triple, R, E, L, I 
> think its much cleaner.  
> 
Done.
>
> The definition of a DAG seems to require that either a path 
> from u-> v or v->u exist for every pair u, v.  This should not 
> be the case, right?
> 
You are correct.  A DAG simply has no cycles.
>
> Section 4.3. Figure 4.3. How do you distinguish between
> a latch and a register? 
> 
Should be a register not a latch.  Fixed.
>
> pg 4. Statement of "FSM's, therefore, are a good framework
> for discussing sequential design somewhat indpeendentn
> of timing methodology"  The logic associated with the
> "therefore" word in the above sentence is unclear to
> me. I don't see why the preceding sentences allows us
> to make this conclusion. 
> 
Good point reworded as follows:

Since FSM's can be used
in a similar fashion to describe both synchronous and asynchronous designs, 
they are a good framework for discussing sequential design somewhat 
independent of timing methodology.
>
> pg. 5: Synchronous FSMs often have self-loops, so they are by your
> definition not a labeled di-graph, right?
> 
Good point.  Now allow self-loops.
>
> Pg 5. So = s0 should be So = {s0}, since So is a set.
> 
Good catch.
>
> Skipping to section 4.3.
> 
> Petri nets: I don't like the definitoin of a marking that
> requires the places to be sequentially numbered. This does
> not match the definition of places. I think a marking should
> be a vector of functions that map places to natural numbers.
> (like labels). Note that this change doesn't mean you can't
> still easily right defs for 1-safe petri nets, as follows: 
> For all p \in P, for all \in [M_o> : m(p) <= 1.
> 
Good point. Changed.
>
> I don't like the notion of a labelled petri net not formally
> defined as a new tuple with the label as part of it.
> 
Good point. Changed some of the wording here and the defintion of
labeled graphs above.

Thanks,

Chris
