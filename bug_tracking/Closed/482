From atacs-bugs  Sun Jun  4 22:19:51 2000
Return-Path: <atacs-bugs>
Received: (from atacs-bugs@localhost)
	by chou.elen.utah.edu (8.9.3/8.9.3) id WAA21373
	for atacs-bugs@shang.elen.utah.edu; Sun, 4 Jun 2000 22:19:51 -0600
Received: from jiaqi.elen.utah.edu (IDENT:myers@han.elen.utah.edu [155.99.23.196])
	by chou.elen.utah.edu (8.9.3/8.9.3) with ESMTP id WAA21369
	for <atacs-bugs@vlsigroup.elen.utah.edu>; Sun, 4 Jun 2000 22:19:49 -0600
Received: (from myers@localhost)
	by jiaqi.elen.utah.edu (8.9.3/8.9.3) id WAA03372
	for atacs-bugs@vlsigroup; Sun, 4 Jun 2000 22:23:14 -0600
Date: Sun, 4 Jun 2000 22:23:14 -0600
From: "Chris J. Myers" <myers@vlsigroup.elen.utah.edu>
Message-Id: <200006050423.WAA03372@jiaqi.elen.utah.edu>
To: atacs-bugs@vlsigroup.elen.utah.edu


4.1. Graph Basics

CS people will disagree with your definition of a graph,
which seems restrictive on R. Symmetric R relates to
an undirected graph, and why irreflexive? Is ther some
reason, you don't want self loops? 

Your definition of the size of a graph based on the
nymber of edges is also different than what I think
is customary.

Fig. 4.1. a) now mentioned the word "undirected", which
seems odd since all graphs by your definition are undirected.

The fact that a walk is defined as one that does not
repeat any edge versus that of any node also seems
arbitrary, but I don't know whats customary on that
point.

I see now you bring up a digraph. The problem I have
is that section 4.1 really defines an undirected
graph. I much prefer see a general definition of
a graph and the undirected and directed graphs as
special cases.   Alternatively, you may simply
rename the first part as a "undirected graph".

Yet, I still don't see why you want to remove the
possibility of self-loops.

Example 4.1.5. I don't know what you mean as a graph having 
a labelling function, since the graph is just a pair R, E. 
If you define a labelled graph as a triple, R, E, L, I 
think its much cleaner.  

The definition of a DAG seems to require that either a path 
from u-> v or v->u exist for every pair u, v.  This should not 
be the case, right?

Section 4.3. Figure 4.3. How do you distinguish between
a latch and a register? 

pg 4. Statement of "FSM's, therefore, are a good framework
for discussing sequential design somewhat indpeendentn
of timing methodology"  The logic associated with the
"therefore" word in the above sentence is unclear to
me. I don't see why the preceding sentences allows us
to make this conclusion. 

pg. 5: Synchronous FSMs often have self-loops, so they are by your
definition not a labeled di-graph, right?

Pg 5. So = s0 should be So = {s0}, since So is a set.

Skipping to section 4.3.

Petri nets: I don't like the definitoin of a marking that
requires the places to be sequentially numbered. This does
not match the definition of places. I think a marking should
be a vector of functions that map places to natural numbers.
(like labels). Note that this change doesn't mean you can't
still easily right defs for 1-safe petri nets, as follows: 
For all p \in P, for all \in [M_o> : m(p) <= 1.

I don't like the notion of a labelled petri net not formally
defined as a new tuple with the label as part of it.

More later...

