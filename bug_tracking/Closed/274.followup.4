From peskin@vlsigroup.ece.utah.edu  Thu May  2 10:44:30 2002
Return-Path: <peskin@vlsigroup.ece.utah.edu>
Received: from vlsigroup.ece.utah.edu (IDENT:peskin@ming.elen.utah.edu [155.99.23.210])
	by chou.elen.utah.edu (8.11.6/8.11.6) with ESMTP id g42GiUP10757
	for <atacs-bugs@shang.elen.utah.edu>; Thu, 2 May 2002 10:44:30 -0600
Sender: peskin@chou.elen.utah.edu
Message-ID: <3CD16CED.8C6D77E@vlsigroup.ece.utah.edu>
Date: Thu, 02 May 2002 10:44:29 -0600
From: Eric Peskin <peskin@vlsigroup.ece.utah.edu>
X-Mailer: Mozilla 4.77 [en] (X11; U; Linux 2.4.9-31 i686)
X-Accept-Language: en
MIME-Version: 1.0
To: Chris Myers <atacs-bugs@shang.elen.utah.edu>
Subject: Re: Cannot use state assignment on level-based specifications (PR#274)
References: <200204232144.g3NLiKj19115@chou.elen.utah.edu>
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

Correction: Turns out that domino2 produces different results
depending on whether post processing is on.  It looks like
post-processing removes an entire output!  (out2).  Specifically, as
of cvs tag PR274followup4, in atacs/work/hse, try the following:

	../../bin/atacs -tsG0-1cPys domino2
	mv domino2.prs nopostproc.prs
	../../bin/atacs -tsG0-1ys domino2
	diff nopostproc.prs domino2.prs

I have pasted the output of such a session below.
See also PR#661 (which is how I found out).

Meanwhile, as of cvs tag PR274followup4, I have removed this example
from the regression tests, and moved the example itself back from
	atacs/examples/hse/domino2.hse
to          atacs/work/hse/domino2.hse

---8<------8<------8<------8<------8<------8<------8<------8<------8<---
302 ming:~> cd ~peskin/atacs/work/hse/
303 ming:work/hse> ../../bin/atacs -tsG0-1cPys domino2
ATACS VERSION 5.1
Logging session in:  atacs.log
Using PO sets timing to obtain state graphs.
Changing minimum gate delay from 0 to 0.
Changing maximum gate delay from infinity to 1
No longer using postprocessing during compilation.
Using single-cube algorithm for synthesis.
Compiling domino2.hse ... 
Compiled process globalclock
Compiled process clk1
Compiled process clk2
Compiled gate first
Compiled gate second
Compiled constraint down1
Compiled constraint down2
Storing module domino2 to ./domino2.tel
Loading timed event/level structure from:  domino2.tel
Initializing 3 cycles ... done
Checking for cycles in acyclic constraint graph ... done.
Checking liveness ... live
Checking safety ... safe
Finding redundant rules ... done (0.000123)
Finding reduced state graph ... nodes = 593, dead = 11733
memory: max=2416904 inuse=2403944 free=12960 
done
1178 iterations, 616 regions, 572 new_regions, 342 states in 0.290443 seconds
nodes in use = 593, dead = 11733
memory: max=2416904 inuse=2403944 free=12960
Found 616 zones in 342 states for domino2 (31d 2416904m 0.29u)
Projecting out dummy transitions ... done (0.005263)
Checking output semi-modularity ... output semi-modular
Checking CSC ... complete state coded
Finding regions ... EXCEPTION!
EXCEPTION:  Persistence rule violation!
Finding conflicts ... EXCEPTION!
EXCEPTION:  Unresolvable conflicts!
Splitting regions ... EXCEPTION!
EXCEPTION:  Unresolvable conflicts!
Splitting regions ... done (0.002939)
Finding covers ... done (0.000239)
Storing production rules to:  domino2.prs
Synthesis succeeded with area = 6 literals 12 transistors
304 ming:work/hse> mv domino2.prs nopostproc.prs
305 ming:work/hse> ../../bin/atacs -tsG0-1ys domino2
ATACS VERSION 5.1
Logging session in:  atacs.log
Using PO sets timing to obtain state graphs.
Changing minimum gate delay from 0 to 0.
Changing maximum gate delay from infinity to 1
Using single-cube algorithm for synthesis.
Compiling domino2.hse ... 
Compiled process globalclock
Compiled process clk1
Compiled process clk2
Compiled gate first
Compiled gate second
Compiled constraint down1
Compiled constraint down2
Post processing ...Storing module preproc to preproc.tel
update 1 $13+/1 
Storing module 0 to 0.tel
update 1 $12+/1 
Storing module 1 to 1.tel
update 1 $10+/1 
Storing module 2 to 2.tel
update 1 $9+/1 
Storing module 3 to 3.tel
update 1 $15+/1 
Storing module 4 to 4.tel
update 1 $17+/1 
Storing module 5 to 5.tel
update 1 $4+/1 
Storing module 6 to 6.tel
update 1 $3+/1 
Storing module 7 to 7.tel
update 1 $1+/1 
Storing module 8 to 8.tel
update 1 $0+/1 
Storing module 9 to 9.tel
update 1 $6+/1 
Storing module 10 to 10.tel
update 1 $8+/1 
Storing module 11 to 11.tel
update 1 $20+/1 
Storing module 12 to 12.tel
update 1 $21+/1 
Storing module 13 to 13.tel
update 1 $18+/1 
Storing module 14 to 14.tel
update 1 $19+/1 
Storing module 15 to 15.tel
Storing module domino2 to ./domino2.tel
Loading timed event/level structure from:  domino2.tel
Initializing 3 cycles ... done
Checking for cycles in acyclic constraint graph ... done.
Checking liveness ... live
Checking safety ... safe
Finding redundant rules ... done (0.000057)
Finding reduced state graph ... nodes = 545, dead = 10829
memory: max=1556744 inuse=1547480 free=9264 
done
182 iterations, 118 regions, 92 new_regions, 47 states in 0.023662 seconds
nodes in use = 545, dead = 10829
memory: max=1556744 inuse=1547480 free=9264
Found 118 zones in 47 states for domino2 (13d 1556744m 0.02u)
Projecting out dummy transitions ... done (0.000625)
Checking output semi-modularity ... output semi-modular
Checking CSC ... complete state coded
Finding regions ... EXCEPTION!
EXCEPTION:  Persistence rule violation!
Finding conflicts ... EXCEPTION!
EXCEPTION:  Unresolvable conflicts!
Splitting regions ... done (0.000523)
Finding covers ... done (0.000089)
Storing production rules to:  domino2.prs
Synthesis succeeded with area = 3 literals 6 transistors
306 ming:work/hse> diff nopostproc.prs domino2.prs 
1,2d0
< [+out2: (c & out1)]
< [-out2: (~clk2)]
307 ming:work/hse>

