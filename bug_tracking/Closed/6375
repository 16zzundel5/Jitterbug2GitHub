From zhen.zhang@utah.edu  Tue Sep  1 22:48:05 2015
Return-Path: <zhen.zhang@utah.edu>
Received: from ipo3.cc.utah.edu (ipo3.cc.utah.edu [155.97.144.18])
	by chou.ece.utah.edu (8.14.9/8.14.4) with ESMTP id t824m4vU009883
	for <atacs-bugs@vlsigroup.ece.utah.edu>; Tue, 1 Sep 2015 22:48:04 -0600
X-IronPort-AV: E=Sophos;i="5.17,451,1437458400"; 
   d="scan'208";a="513507188"
Received: from mail-ob0-f174.google.com ([209.85.214.174])
  by ipo3smtp.cc.utah.edu with ESMTP/TLS/RC4-SHA; 01 Sep 2015 22:48:03 -0600
Received: by obuk4 with SMTP id k4so17426804obu.2
        for <atacs-bugs@vlsigroup.ece.utah.edu>; Tue, 01 Sep 2015 21:48:02 -0700 (PDT)
X-Received: by 10.60.60.68 with SMTP id f4mr7082238oer.38.1441169282932; Tue,
 01 Sep 2015 21:48:02 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.202.169.129 with HTTP; Tue, 1 Sep 2015 21:47:23 -0700 (PDT)
In-Reply-To: <DC6E7AD1-A693-4B9C-BB31-8F5176A2CE41@ece.utah.edu>
References: <CA+LVOvkRike15vsHmF4AXWipaEDNULRYBZuC_88_PQiSuFvjbQ@mail.gmail.com>
 <DC6E7AD1-A693-4B9C-BB31-8F5176A2CE41@ece.utah.edu>
From: Zhen Zhang <zhen.zhang@utah.edu>
Date: Tue, 1 Sep 2015 22:47:23 -0600
Message-ID: <CA+LVOvnBRyDKnfvE-SiDs2DEEhsgzEEvvoJDJRV3oBez60WAMA@mail.gmail.com>
Subject: Re: BUG: VHDL compiler does not compile the Boolean condition for
 "while" loop correctly
To: "Chris J. Myers" <myers@ece.utah.edu>
Cc: atacs-bugs <atacs-bugs@vlsigroup.ece.utah.edu>
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
X-MIME-Autoconverted: from quoted-printable to 8bit by chou.ece.utah.edu id t824m4vU009883

You are right about changing to std_logic. The other issue is that it
can not be declared as a "variable" inside a process statement.
Otherwise it is compiled to "true", even if it is typed "std_logic".
This is the file that illustrate this issue:
/home/ming/zhangz/nobackup/research/lpn/noc2by2_livelock_free/arbiter_nack_2_stdlogic.vhd.

In order for this to work, the "free" variable is declared as a signal
with type std_logic. The VHDL compiler now adds it correctly as a
condition for the while loop. This version is shown in
arbiter_nack_2.vhd. I will close this issue.

Thanks for fixing with the atacs issue on Mac.

Zhen

std_logic

On Tue, Sep 1, 2015 at 9:01 PM, Chris J. Myers <myers@ece.utah.edu> wrote:
> I’m pretty sure your problem is that you are using integers.  We assume integers are supposed to be turned into “true” as they represent non-deterministic choices returned by selection.  I think if you change free to a std_logic, that you will have better luck.
>
> By the way, I got ATACS to compile on my Mac, but I had to comment out some code, likely breaking things.  Luckily nothing critical path for you, but I would like to see if I can figure out what I broke before I check-in.  Bloody STL is not stable.  It is all C++/STL code that causes problems.
>
> Chris
>
>> On Sep 1, 2015, at 4:19 PM, Zhen Zhang <zhen.zhang@utah.edu> wrote:
>>
>> The Boolean condition condition is compiled to a nondetermnistic
>> choice in LPN: a place with two postset transitions whose enabling
>> conditions are "true". Here is a detailed example that illustrate this
>> error. The relevant files mentioned below are located in
>> /home/ming/zhangz/nobackup/research/lpn/noc2by2_livelock_free.
>>
>> The top-level file is top_arbiter_nack_2.vhd. The arbiter that takes
>> two inputs and nondeterministically selects one output is modeled in
>> arbiter_nack_2.vhd. The two inputs, namely an input from an IP router
>> and an input from a router that makes an illegal turn, compete for
>> sending its packet to the arbiter. While-loops are used in the arbiter
>> to model its behavior so that it rejects the illegal turn request
>> while serving a packet.
>>
>> The compiling error is that the Boolean condition for the while loop
>> is missing, and only a nondeterministic decision between two choices
>> is produced: one exits the loop and the other remains in the loop.
>> This can be seen as the following place and transitions in
>> top_arbiter_nack_2_NEW.dot: p_62, d_13P_arbiter_nack_2_arb_w_111
>> (exiting the loop), and d_12_P_arbiter_nack_2_arb_w_111 (remaining in
>> the loop). They are in the leftmost LPN on the dot file.
>

