From zhen.zhang@utah.edu  Tue Sep 22 18:01:43 2015
Return-Path: <zhen.zhang@utah.edu>
Received: from ipo4.cc.utah.edu (ipo4.cc.utah.edu [155.97.144.24])
	by chou.ece.utah.edu (8.14.9/8.14.4) with ESMTP id t8N01htH025833
	for <atacs-bugs@vlsigroup.ece.utah.edu>; Tue, 22 Sep 2015 18:01:43 -0600
X-IronPort-AV: E=Sophos;i="5.17,575,1437458400"; 
   d="scan'208";a="515027216"
Received: from mail-oi0-f47.google.com ([209.85.218.47])
  by ipo4smtp.cc.utah.edu with ESMTP/TLS/RC4-SHA; 22 Sep 2015 18:01:42 -0600
Received: by oixx17 with SMTP id x17so15181706oix.0
        for <atacs-bugs@vlsigroup.ece.utah.edu>; Tue, 22 Sep 2015 17:01:41 -0700 (PDT)
X-Received: by 10.202.232.12 with SMTP id f12mr14872673oih.122.1442966501759;
 Tue, 22 Sep 2015 17:01:41 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.202.199.4 with HTTP; Tue, 22 Sep 2015 17:01:02 -0700 (PDT)
In-Reply-To: <201509181326.t8IDQTIs015825@chou.ece.utah.edu>
References: <201509181326.t8IDQTIs015825@chou.ece.utah.edu>
From: Zhen Zhang <zhen.zhang@utah.edu>
Date: Tue, 22 Sep 2015 18:01:02 -0600
Message-ID: <CA+LVOvnqDq7apxfEpk+YWOuX7HmWeT7QQ=9aQ-ytQYeze83kHA@mail.gmail.com>
Subject: Re: CHANGE: Guarantee execution of transitions compiled from
 non-blocking (PR#6393)
To: Chris Myers <atacs-bugs@vlsigroup.ece.utah.edu>
Cc: "Chris J. Myers" <myers@ece.utah.edu>
Content-Type: text/plain; charset=UTF-8

This works now. For each nondeterministic choice branch, two
transitions are generated. The first one has an enabling condition of
"true" (originally generated as "may" or "~(maybe)), with 0 delay, and
the second transition has no enabling condition (same as "true") and
an assignment to the data1 variable. Is the first transition needed?
Can each branch only have the second transition instead?

On Fri, Sep 18, 2015 at 7:26 AM, Chris Myers
<atacs-bugs@vlsigroup.ece.utah.edu> wrote:
> You should now be able to assign to vectors like below.  Please test.
>
> library ieee;
> use ieee.std_logic_1164.all;
> use ieee.std_logic_arith.all;
> use ieee.std_logic_unsigned.all;
> use ieee.numeric_std.all;
> use work.channel.all;
>
> entity producer_consumer is
> end producer_consumer;
>
> architecture behavior of producer_consumer is
>  signal producer_to_buf1:channel:=init_channel;
>  signal data1 : std_logic_vector(1 downto 0);
>  signal data2 : std_logic_vector(1 downto 0);
> begin
>  producer:process
>    variable z : integer;
>  begin
>    --data1 <= selection(4,2);
>    --wait for delay(5,10);
>    z := selection(4);                  -- returns 1, 2, 3, or 4
>    if (z = 1) then
>      assign(data1,"11",1,1);
>     elsif (z = 2) then
>      assign(data1,"01",1,1);
>    elsif (z = 3) then
>      assign(data1,"10",1,1);
>    else
>      assign(data1,"00",1,1);
>    end if;
>    send(producer_to_buf1,data1);
>  end process producer;
>  buf1:process
>  begin
>    receive(producer_to_buf1,data2);
>  end process buf1;
> end behavior;
>

