From: Eric Robert Peskin <atacs-bugs@shang.elen.utah.edu>
To: myers@vlsigroup.elen.utah.edu
Subject: Re: Find combinational covers using BDDs (PR#132)
Date: Tue Jun 22 17:41:38 1999

I am not convinced this works.

If I understand the notation correctly, the results Rob says to compare (in the
Notes) differ.

In the example below, x.prs says b+ = ab + ax' + bx'
                  but x.MAP says b+ =      ax' + ax'b

This looks incorrect to me, so for now I am moving this to Incorrect Behavior

479 song:~/atacs/examples> pwd
/home/xia/peskin/atacs/examples
480 song:~/atacs/examples> ls -l `which atacs`
-rwxr-xr-x   1 peskin   utmp     11454019 Jun 22 12:58
/home/xia/peskin/atacs/src/atacs*
481 song:~/atacs/examples> atacs -mB -mV -ya x
ATACS VERSION 4.1
Logging session in:  atacs.log
Using BDD methods for synthesis.
Verbose mode now turned ON.
Compiling x.csp ... 
Storing process xx to xx.er
Storing process yy to yy.er
Storing process  to .er
Storing process x to x.er
Loading timed event-rule structure from:  x.er
Initializing 3 cycles ... done
Checking liveness ... live
Checking connectivity ... strongly connected
Checking safety ... safe
Finding reduced state graph and storing to:  x.rsg
Finding excitation regions and storing to: x.es... done
Finding all valid covers and storing to: x.prs... done
Finding basic covers and storing to: x.BC... done
Finding smallest covers and storing to: x.MAP... done
482 song:~/atacs/examples> more x.MAP
LITERALVECTOR:<a ~a b ~b x ~x >
MAP(b+) =  
100001  1
MAP(x+) =  
001000  1
MAP(b-) =  
010010  1
MAP(x-) =  
000100  1
LITERALVECTOR:<a ~a b ~b x ~x >
MAP(b+) =  
100101  1
MAP(x+) =  
001001  1
MAP(b-) =  
011010  1
MAP(x-) =  
000110  1
LITERALVECTOR:<a ~a b ~b x ~x >
MAP(b+) =  
100101  1
MAP(x+) =  
001001  1
MAP(b-) =  
011010  1
MAP(x-) =  
000110  1
483 song:~/atacs/examples> atacs -mM -mA -ya x
ATACS VERSION 4.1
Logging session in:  atacs.log
Using multi-cube covering procedure.
Now generating atomic gate implementations.
Compiling x.csp ... 
Storing process xx to xx.er
Storing process yy to yy.er
Storing process  to .er
Storing process x to x.er
Loading timed event-rule structure from:  x.er
Initializing 3 cycles ... done
Checking liveness ... live
Checking connectivity ... strongly connected
Checking safety ... safe
Finding reduced state graph ... done
Projecting out dummy transitions ... done
Checking CSC ... complete state coded
Finding regions ... done
Finding all primes ... done
Finding prime implicant tables ... done
Finding prime cover and storing to:  x.prs
484 song:~/atacs/examples> more x.prs
[+b: (a & b)]
[+b: (a & ~x)]
[+b: (b & ~x)]
[-b: (~a & ~b)]
[-b: (~a & x)]
[-b: (~b & x)]
[+x: (b)]
[-x: (~b)]
