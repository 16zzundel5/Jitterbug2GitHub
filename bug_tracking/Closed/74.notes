Hao
The example below differs from the successful example 
	/home/ming/atacs/examples/csp/lapbN.csp
only in that I moved the environment processes above the instantiations of
lapb.

Hao,
I still get the same results, even with the latest, greatest version of atacs
(see below).  The point is that 
	         /home/ming/atacs/examples/csp/lapbN.csp
goes through without a CSC violation, but 

/home/shang/peskin/examples/csp/meetMorn/fresh/lapbN.csp
has a CSC violation.  Why is this the case, when the only difference is the
order of processes in the .csp file?


138 ming:meetMorn/fresh> pwd
/home/shang/peskin/examples/csp/meetMorn/fresh
139 ming:meetMorn/fresh> ls -l `which atacs`
-rwxr-xr-x   1 peskin   101      10568691 Apr  6 09:29
/home/shang/peskin/atacs/atacs*
140 ming:meetMorn/fresh> atacs -ya lapbN
ATACS VERSION 4.1
Logging session in:  atacs.log
Compiling lapbN.csp ... 
Storing process lapbctrl to lapbctrl.er
Storing process left to left.er
Storing process right to right.er
Storing process lapb to lapb.er
Storing process leftenv to leftenv.er
Storing process rightenv to rightenv.er
Storing process main to main.er
Storing process lapbN to lapbN.er
Loading timed event-rule structure from:  lapbN.er
Initializing 3 cycles ... done
Checking liveness ... live
Checking connectivity ... NOT strongly connected
EXCEPTION:  Connectivity violation!
Checking safety ... safe
Finding reduced state graph ... done
Projecting out dummy transitions ... done
Checking CSC ... NOT complete state coded
EXCEPTION:  CSC violation!
141 ming:meetMorn/fresh> diff ../../ lapbN.csp
16,19d15
< lapb lapb1(li => i1, lo => o1, ri => o2, ro => i2);
< 
< lapb lapb2(li => i2, lo => o2, ri => o3, ro => i3);
< 
26a23,27
> 
> lapb lapb1(li => i1, lo => o1, ri => o2, ro => i2);
> 
> lapb lapb2(li => i2, lo => o2, ri => o3, ro => i3);
> 
142 ming:meetMorn/fresh> 